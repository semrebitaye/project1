package main

import (
	"booking_app/helper"
	"fmt"
	"sync"
	"time"
)

var conferenceName string = "Go Conference"

const conferenceTicket int = 50

var remainingTicket uint = 50
var bookings = make([]userData, 0)

type userData struct {
	firstName  string
	lastName   string
	email      string
	userTicket uint
}

var wg = sync.WaitGroup{}

func main() {
	greetUsers()

	firstName, lastName, email, userTicket := getUserInput()
	isValidName, isValidEmail, isValidTicketNumber := helper.ValidateUserInput(firstName, lastName, email, userTicket, remainingTicket)

	if isValidName && isValidEmail && isValidTicketNumber {
		bookTicket(userTicket, firstName, lastName, email)

		wg.Add(1)
		go sendTicket(userTicket, firstName, lastName, email)

		firstNames := getFirstName()
		fmt.Printf("the first names of the bookings are: %v\n", firstNames)

		if remainingTicket == 0 {
			fmt.Println("we have finished our tickets for the conference.")
		} else {
			if !isValidName {
				fmt.Println("first name or last name you entered is short.")
			}
			if !isValidEmail {
				fmt.Println("the email you entered have not contain @ sign. try again with a valid email.")
			}
			if !isValidTicketNumber {
				fmt.Println("the number of tickets you entered is not valid. try again with a ticket number of greater than 0.")
			}
		}
		wg.Wait()
	}
}

func greetUsers() {
	fmt.Printf("welcome to %v booking application\n", conferenceName)
	fmt.Printf("we have a total of %v ticket and %v are still available.\n", conferenceTicket, remainingTicket)
	fmt.Printf("Get your tickets here to attend.\n")
}

func getFirstName() []string {
	firstNames := []string{}
	for _, booking := range bookings {
		firstNames = append(firstNames, booking.firstName)
	}
	return firstNames
}

func getUserInput() (string, string, string, uint) {

	var firstName string
	var lastName string
	var email string
	var userTicket uint

	fmt.Println("Enter your first name: ")
	fmt.Scan(&firstName)

	fmt.Println("Enter your last name: ")
	fmt.Scan(&lastName)

	fmt.Println("Enter your email address: ")
	fmt.Scan(&email)

	fmt.Println("Enter the number of ticket you want to book: ")
	fmt.Scan(&userTicket)

	return firstName, lastName, email, userTicket
}

func bookTicket(userTicket uint, firstName string, lastName string, email string) {
	remainingTicket = remainingTicket - userTicket

	var userData = userData{
		firstName:  firstName,
		lastName:   lastName,
		email:      email,
		userTicket: userTicket,
	}

	bookings = append(bookings, userData)

	fmt.Printf("List of Bookings are: %v\n", userData)
	fmt.Printf("Thank you %v %v for booking %v tickets. you will recieve a confirmation email at %v\n", firstName, lastName, userTicket, email)
	if remainingTicket > 0 {
		fmt.Printf("%v tickets remaining for %v\n", remainingTicket, conferenceName)
	} else if remainingTicket < 0 {
		fmt.Printf("sorry %v %v, There is no remaining tickets for booking.", firstName, lastName)
		return
	} else if remainingTicket == 0 {
		fmt.Println("we have finished our tickets for the conferemce.")
	}
}

func sendTicket(userTicket uint, firstName string, lastName string, email string) {
	time.Sleep(10 * time.Second)
	var ticket = fmt.Sprintf("%v Tickets send to user %v %v\n", userTicket, firstName, lastName)
	fmt.Println("######################################")
	fmt.Printf("sending Ticket:\n %v to email address %v\n", ticket, email)
	fmt.Println("#####################################")
	wg.Done()
}
